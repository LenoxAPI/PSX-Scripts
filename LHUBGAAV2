local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Grow An Animal - LHub",
	Icon = 0,
	LoadingTitle = "LHub",
	LoadingSubtitle = "by Lenox",
	ShowText = "LHub",
	Theme = "Default",
	ToggleUIKeybind = Enum.KeyCode.RightControl,
	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false,
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil,
		FileName = "LHub"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink",
		RememberJoins = true
	},
	KeySystem = false,
	KeySettings = {
		Title = "Grow An Animal - LHub",
		Subtitle = "Key System",
		Note = "Key is: RELEASE",
		FileName = "KeyLHubGrowAnAnimal",
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = {"RELEASE"}
	}
})

Window.ModifyTheme("Ocean")

Rayfield:Notify({
	Title = "LHub",
	Content = "LHub was successfully loaded",
	Duration = 6.5,
	Image = 4483362458,
})

local function getPlot(player)
	local plots = workspace.Plots:GetChildren()

	for i, plot in plots do
		local owner = plot:FindFirstChild("Owner")

		if owner.Value == player.Name then
			return plot
		end
	end
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Auto")

-- Dropdown
local animals = {}
for _, v in ipairs(game.ReplicatedStorage.EggStock:GetChildren()) do
	table.insert(animals, v.Name)
end

local selectedOptions = {}

local Dropdown = Tab:CreateDropdown({
	Name = "Select Animal",
	Options = animals,
	CurrentOption = {"Bunny"},
	MultipleOptions = true,
	Flag = "Dropdown1",
	Callback = function(Options)
		selectedOptions = Options
	end,
})

-- EggStock Monitoring
local monitoring = false
local connections = {}

local function startMonitoring()
	if monitoring then return end
	monitoring = true

	local eggStock = LocalPlayer:WaitForChild("EggStock")

	for _, child in ipairs(eggStock:GetChildren()) do
		table.insert(connections, child.Changed:Connect(function()
			for _, animal in selectedOptions do
				game.ReplicatedStorage.BuyEggEvent:FireServer(animal)
				Rayfield:Notify({
					Title = "LHub",
					Content = "Bought Egg: "..animal,
					Duration = 6.5,
					Image = 4483362458,
				})
			end
		end))
	end
end

local function stopMonitoring()
	monitoring = false
	for _, conn in ipairs(connections) do
		if conn and conn.Disconnect then
			conn:Disconnect()
		end
	end
	table.clear(connections)
end

-- Toggle
local Toggle = Tab:CreateToggle({
	Name = "Auto Buy Eggs",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		if Value then
			startMonitoring()
		else
			stopMonitoring()
		end
	end,
})

local Divider = Tab:CreateDivider()

local currentSellCooldown = 10
local sellingEnabled = false
local runService = game:GetService("RunService")

-- Hintergrund-Loop-Logik
task.spawn(function()
	while true do
		if sellingEnabled then
			if #game.Players.LocalPlayer.Backpack:GetChildren() > 0 then
				game.ReplicatedStorage.Sell:FireServer("All")
				Rayfield:Notify({
					Title = "LHub",
					Content = "Sold Inventory",
					Duration = 6.5,
					Image = 4483362458,
				})
			end
		end
		task.wait(currentSellCooldown)
	end
end)

-- Toggle
local Toggle2 = Tab:CreateToggle({
	Name = "Auto Sell Inventory",
	CurrentValue = false,
	Flag = "Toggle2",
	Callback = function(Value)
		sellingEnabled = Value
	end,
})

-- Slider
local Slider = Tab:CreateSlider({
	Name = "Selling Cooldown",
	Range = {5, 100},
	Increment = 1,
	Suffix = "Seconds",
	CurrentValue = 10,
	Flag = "SellCooldown",
	Callback = function(Value)
		currentSellCooldown = Value
	end,
})

local Divider = Tab:CreateDivider()

local Toggle3
local placingEggs = false

local function getGroundInstance(hrp)
	local origin = hrp.Position
	local direction = Vector3.new(0, -3.1, 0) -- Strahl 10 Studs nach unten
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}
	raycastParams.FilterType = Enum.RaycastFilterType.Exclude

	local result = workspace:Raycast(origin, direction, raycastParams)
	if result then
		return result.Instance
	else
		return workspace.Terrain -- fallback
	end
end

local function autoPlaceEggs()
	local player = game.Players.LocalPlayer
	local backpack = player:WaitForChild("Backpack")
	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")
	local humanoid = character:WaitForChild("Humanoid")

	while placingEggs do
		for _, animal in ipairs(game.ReplicatedStorage.EggStock:GetChildren()) do
			local eggNamePrefix = animal.Name .. " Egg"

			for _, tool in ipairs(backpack:GetChildren()) do
				if tool:IsA("Tool") and tool.Name:sub(1, #eggNamePrefix) == eggNamePrefix then
					local groundInstance = getGroundInstance(hrp)
					local plot = getPlot(game.Players.LocalPlayer)

					game.ReplicatedStorage.PlaceEggEvent:FireServer(
						hrp.Position - Vector3.new(0, 3, 0),
						tool.Name,
						plot.Plots.Plot1.Base
					)
				end
			end
		end

		task.wait(0.05)
	end
end

Toggle3 = Tab:CreateToggle({
	Name = "Auto Place Eggs (OP! ANYWHERE)",
	CurrentValue = false,
	Flag = "Toggle3",
	Callback = function(Value)
		placingEggs = Value
		if Value then
			autoPlaceEggs()
		end
	end,
})

local Label = Tab:CreateLabel("USE FAST BEFORE IT GETS PATCHED!!", 4483362458, Color3.fromRGB(255, 0, 0), false) -- Title, Icon, Color, IgnoreTheme

--[[local Divider = Tab:CreateDivider()

local plot = getPlot(game.Players.LocalPlayer)

local autoCollect = false

fireproximityprompt = function(prompt, holdDuration)
	if not prompt or not prompt:IsA("ProximityPrompt") then return end

	local virtualInput = game:GetService("VirtualInputManager")
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()

	local absPos = prompt.Parent:FindFirstChild("HumanoidRootPart") and prompt.Parent.HumanoidRootPart.Position or prompt.Parent.Position
	game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(absPos + Vector3.new(0, 2, 0))

	-- simulate input (only works in some environments)
	pcall(function()
		prompt:InputHoldBegin()
		task.wait(holdDuration or 0.5)
		prompt:InputHoldEnd()
	end)
end


local function collectFromAnimals()
	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")

	while autoCollect do
		for _, animal in ipairs(plot.Animals:GetChildren()) do
			if not autoCollect then break end

			-- Finde ein gÃ¼ltiges Prompt
			local prompt = animal:FindFirstChildWhichIsA("ProximityPrompt", true)

			-- Warte auf Prompt falls nicht vorhanden
			if not prompt then
				prompt = animal.DescendantAdded:Wait()
				if not prompt:IsA("ProximityPrompt") then continue end
			end

			-- Warte bis prompt enabled ist
			local timeout = 3
			while not prompt.Enabled and timeout > 0 do
				task.wait(0.1)
				timeout -= 0.1
			end

			-- Falls nach Timeout immer noch disabled, skip
			if not prompt.Enabled then continue end

			-- Teleport zum Tier
			local animalHRP = animal:FindFirstChild("HumanoidRootPart") or animal.PrimaryPart
			if not animalHRP then continue end
			hrp.CFrame = animalHRP.CFrame + Vector3.new(0, 2, 0)

			-- Prompt triggern
			pcall(function()
				prompt:InputHoldBegin()
				task.wait(prompt.HoldDuration or 0.5)
				prompt:InputHoldEnd()
			end)

			task.wait(0.3)
		end
	end
end


local Toggle4 = Tab:CreateToggle({
	Name = "Auto Collect (Buggy)",
	CurrentValue = false,
	Flag = "Toggle4",
	Callback = function(Value)
		autoCollect = Value
		if Value then
			collectFromAnimals()
		end
	end,
})]]--

local Tab2 = Window:CreateTab("Player", 4483362458)
local Section2 = Tab2:CreateSection("Values")

local Toggle6
local Toggle5

local currentSpeed = 16

local Slider2 = Tab2:CreateSlider({
	Name = "Player Speed",
	Range = {1, 100},
	Increment = 1,
	Suffix = "WalkSpeed",
	CurrentValue = 16,
	Flag = "SpeedPlayer",
	Callback = function(Value)
		currentSpeed = Value
		if Toggle5.CurrentValue == true then
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = currentSpeed
		end
	end,
})


Toggle5 = Tab2:CreateToggle({
	Name = "Enable WalkSpeed",
	CurrentValue = false,
	Flag = "Toggle5",
	Callback = function(Value)
		if Value then
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = currentSpeed
		else
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		end
	end,
})

local Divider = Tab2:CreateDivider()

local currentJumpPower = 50

local Slider2 = Tab2:CreateSlider({
	Name = "Player Jump",
	Range = {1, 200},
	Increment = 1,
	Suffix = "JumpPower",
	CurrentValue = 50,
	Flag = "JumpPlayer",
	Callback = function(Value)
		currentJumpPower = Value

		if Toggle6.CurrentValue == true then
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = currentJumpPower
		end
	end,
})

Toggle6 = Tab2:CreateToggle({
	Name = "Enable JumpPower",
	CurrentValue = false,
	Flag = "Toggle6",
	Callback = function(Value)
		if Value then
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = currentJumpPower
		else
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
		end
	end,
})

--loadstring(game:HttpGet("https://raw.githubusercontent.com/LenoxAPI/PSX-Scripts/refs/heads/main/LHubGAA", true))()
